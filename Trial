#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <algorithm>
#include <ctime>
#include <iomanip>

using namespace std;

struct Task {
    string name;
    string description;
    time_t dueDate; // Add a due date field using time_t data type
};

struct User {
    string name;
    string password;
    vector<Task> tasks;
};

vector<User> users;

// Function to save tasks to a file
void saveTasksToFile(const string& filename) {
    ofstream outputFile(filename);

    if (!outputFile) {
        cout << "Error opening file." << endl;
        return;
    }

    for (const auto& user : users) {
        for (const auto& task : user.tasks) {
            outputFile << "Task: " << task.name << endl;
            outputFile << "Task Description: " << task.description << endl;
            outputFile << "Due Date: " << task.dueDate << endl; // Save the due date as well
            outputFile << "-----------------------" << endl;
        }
    }

    outputFile.close();
    cout << "Tasks saved to file successfully!" << endl;
}

void addUser() {
    User newUser;
    cout << "Enter name: ";
    cin.ignore();
    getline(cin, newUser.name);
    cout << "Enter password: ";
    getline(cin, newUser.password);
    users.push_back(newUser);
    cout << "User added successfully!" << endl;
}

void displayUsers() {
    if (users.empty()) {
        cout << "No users found." << endl;
    } else {
        cout << "========= Users =========" << endl;
        for (const auto& user : users) {
            cout << "Name: " << user.name << endl;
            cout << "-----------------------" << endl;
        }
    }
}

bool loginUser() {
    string name, password;
    cout << "Enter name: ";
    cin.ignore();
    getline(cin, name);
    cout << "Enter password: ";
    cin >> password;

    for (const auto& user : users) {
        if (user.name == name && user.password == password) {
            cout << "Login successful!" << endl;
            return true;
        }
    }

    cout << "Login failed. Invalid username or password." << endl;
    return false;
}

void addTask() {
    Task newTask;
    cout << "Enter task name: ";
    cin.ignore();
    getline(cin, newTask.name);
    cout << "Enter task description: ";
    getline(cin, newTask.description);
    cout << "Enter due date (MM/DD/YYYY HH:MM AM/PM): ";
    string dueDateStr;
    getline(cin, dueDateStr);

    // Parse the due date string using std::istringstream
    istringstream ss(dueDateStr);
    tm tm = {};
    ss >> get_time(&tm, "%m/%d/%Y %I:%M %p");

    // Convert std::tm to time_t
    newTask.dueDate = std::mktime(&tm);

    users.back().tasks.push_back(newTask);
    cout << "Task added successfully!" << endl;
}

void viewTasks() {
    if (users.back().tasks.empty()) {
        cout << "No tasks found." << endl;
    } else {
        cout << "========= Tasks =========" << endl;
        int taskNumber = 1;
        for (const auto& task : users.back().tasks) {
            cout << "Task " << taskNumber << ":" << endl;
            cout << "Name: " << task.name << endl;
            cout << "Description: " << task.description << endl;
            cout << "Due Date: " << asctime(localtime(&task.dueDate)); // Convert and display the due date as a string
            cout << "-----------------------" << endl;
            taskNumber++;
        }
    }
}

bool deleteTask() {
    if (users.back().tasks.empty()) {
        cout << "No tasks found." << endl;
        return false;
    } else {
        cout << "========= Tasks =========" << endl;
        int taskNumber = 1;
        for (auto& task : users.back().tasks) {
            cout << "Task " << taskNumber << ":" << endl;
            cout << "Name: " << task.name << endl;
            cout << "Description: " << task.description << endl;
            cout << "Due Date: " << asctime(localtime(&task.dueDate)); // Convert and display the due date as a string
            cout << "-----------------------" << endl;
            taskNumber++;
        }

        int taskIndex;
        cout << "Enter the task number to delete (0 to go back): ";
        cin >> taskIndex;

        if (taskIndex >= 1 && taskIndex <= users.back().tasks.size()) {
            users.back().tasks.erase(users.back().tasks.begin() + taskIndex - 1);
            cout << "Task deleted successfully!" << endl;
            return true;
        } else if (taskIndex == 0) {
            cout << "Going back to Task Manager menu." << endl;
            return true;
        } else {
            cout << "Invalid task number. Please try again." << endl;
            return false;
        }
    }
}

void checkTaskReminders() {
    time_t currentTime = time(nullptr);
    struct tm* localTime = localtime(&currentTime);

    cout << "========= Task Reminders =========" << endl;

    for (const auto& user : users) {
        for (const auto& task : user.tasks) {
            struct tm* taskDueDate = localtime(&task.dueDate);
            if (localTime->tm_year == taskDueDate->tm_year && localTime->tm_mon == taskDueDate->tm_mon &&
                localTime->tm_mday == taskDueDate->tm_mday && localTime->tm_hour == taskDueDate->tm_hour &&
                localTime->tm_min == taskDueDate->tm_min) {
                cout << "Task Name: " << task.name << endl;
                cout << "Description: " << task.description << endl;
                cout << "Due Date: " << asctime(taskDueDate);
                cout << "----------------------------------" << endl;
            }
        }
    }
}

void chooseUser() {
    if (loginUser()) {
        int userChoice;
        do {
            cout << "========= Task Manager =========" << endl;
            cout << "1. Add Task" << endl;
            cout << "2. View Tasks" << endl;
            cout << "3. Delete Task" << endl;
            cout << "4. Save Tasks to File" << endl;
            cout << "5. Load Tasks from File" << endl;
            cout << "6. Check Task Reminders" << endl; // New option to check task reminders
            cout << "7. Exit" << endl;
            cout << "Enter your choice: ";
            cin >> userChoice;
            switch (userChoice) {
                case 1:
                    addTask();
                    break;
                case 2:
                    viewTasks();
                    break;
                case 3:
                    deleteTask();
                    break;
                case 4: {
                    string filename;
                    cout << "Enter the filename to save tasks: ";
                    cin.ignore();
                    getline(cin, filename);
                    saveTasksToFile(filename);
                    break;
                }
                case 5: {
                    string filename;
                    cout << "Enter the filename to load tasks: ";
                    cin.ignore();
                    getline(cin, filename);
                    // Implement the function to load tasks from file
                    break;
                }
                case 6:
                    checkTaskReminders(); // Call the new function to check task reminders
                    break;
                case 7:
                    cout << "Exiting Task Manager. Goodbye!" << endl;
                    break;
                default:
                    cout << "Invalid choice. Please try again." << endl;
            }
            cout << endl;
        } while (userChoice != 7);
    }
}

int main() {
    int choice;

    do {
        cout << "========= User Management =========" << endl;
        cout << "1. Add User" << endl;
        cout << "2. Display Users" << endl;
        cout << "3. Choose User" << endl;
        cout << "4. Parse Due Date" << endl; // Added option for parsing a due date
        cout << "5. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                addUser();
                break;
            case 2:
                displayUsers();
                break;
            case 3:
                chooseUser();
                break;
            case 4: {
                std::string dueDateStr;

                cout << "Enter the due date string (MM/DD/YYYY HH:MM AM/PM): ";
                cin.ignore();
                getline(cin, dueDateStr);

                // Parse and display the due date
                istringstream ss(dueDateStr);
                tm tm = {};
                ss >> std::get_time(&tm, "%m/%d/%Y %I:%M %p");
                if (ss.fail()) {
                    cout << "Failed to parse due date." << endl;
                } else {
                    cout << "Year: " << tm.tm_year + 1900 << endl;
                    cout << "Month: " << tm.tm_mon + 1 << endl;
                    cout << "Day: " << tm.tm_mday << endl;
                    cout << "Hour: " << tm.tm_hour << endl;
                    cout << "Minute: " << tm.tm_min << endl;
                }
                break;
            }
            case 5:
                cout << "Exiting User Management. Goodbye!" << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }

        cout << endl;
    } while (choice != 5);

    return 0;
}
