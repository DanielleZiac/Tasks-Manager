#include <iostream>
#include <fstream>
#include <sstream>  // Include the <sstream> header
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

struct Task {
    string name;
    string description;
};

struct User {
    string name;
    string password;
    vector<Task> tasks;
};

vector<User> users;

// Function to save tasks to a file
void saveTasksToFile(const string& filename) {
    ofstream outputFile(filename);

    if (!outputFile) {
        cout << "Error opening file." << endl;
        return;
    }

    for (const auto& user : users) {
        for (const auto& task : user.tasks) {
            outputFile << "Task: " << task.name << endl;
            outputFile << "Task Description: " << task.description << endl;
            outputFile << "-----------------------" << endl;
        }
    }

    outputFile.close();
    cout << "Tasks saved to file successfully!" << endl;
}

void addUser() {
    User newUser;
    cout << "Enter name: ";
    cin.ignore();
    getline(cin, newUser.name);
    cout << "Enter password: ";
    getline(cin, newUser.password);
    users.push_back(newUser);
    cout << "User added successfully!" << endl;
}

void displayUsers() {
    if (users.empty()) {
        cout << "No users found." << endl;
    } else {
        cout << "========= Users =========" << endl;
        for (const auto& user : users) {
            cout << "Name: " << user.name << endl;
            cout << "-----------------------" << endl;
        }
    }
}

bool loginUser() {
    string name, password;
    cout << "Enter name: ";
    cin.ignore();
    getline(cin, name);
    cout << "Enter password: ";
    cin >> password;

    for (const auto& user : users) {
        if (user.name == name && user.password == password) {
            cout << "Login successful!" << endl;
            return true;
        }
    }

    cout << "Login failed. Invalid username or password." << endl;
    return false;
}

void addTask() {
    Task newTask;
    cout << "Enter task name: ";
    cin >> newTask.name;
    cout << "Enter task description: ";
    cin.ignore();
    getline(cin, newTask.description);
    users.back().tasks.push_back(newTask);
    cout << "Task added successfully!" << endl;
}

void viewTasks() {
    if (users.back().tasks.empty()) {
        cout << "No tasks found." << endl;
    } else {
        cout << "========= Tasks =========" << endl;
        int taskNumber = 1;
        for (const auto& task : users.back().tasks) {
            cout << "Task " << taskNumber << ":" << endl;
            cout << "Name: " << task.name << endl;
            cout << "Description: " << task.description << endl;
            cout << "-----------------------" << endl;
            taskNumber++;
        }
    }
}

bool deleteTask() {
    if (users.back().tasks.empty()) {
        cout << "No tasks found." << endl;
        return false;
    } else {
        cout << "========= Tasks =========" << endl;
        int taskNumber = 1;
        for (auto& task : users.back().tasks) {
            cout << "Task " << taskNumber << ":" << endl;
            cout << "Name: " << task.name << endl;
            cout << "Description: " << task.description << endl;
            cout << "-----------------------" << endl;
            taskNumber++;
        }

        int taskIndex;
        cout << "Enter the task number to delete (0 to go back): ";
        cin >> taskIndex;

        if (taskIndex >= 1 && taskIndex <= users.back().tasks.size()) {
            users.back().tasks.erase(users.back().tasks.begin() + taskIndex - 1);
            cout << "Task deleted successfully!" << endl;
            return true;
        } else if (taskIndex == 0) {
            cout << "Going back to Task Manager menu." << endl;
            return true;
        } else {
            cout << "Invalid task number. Please try again." << endl;
            return false;
        }
    }
}

void chooseUser() {
    if (loginUser()) {
        int userChoice;
        do {
            cout << "========= Task Manager =========" << endl;
            cout << "1. Add Task" << endl;
            cout << "2. View Tasks" << endl;
            cout << "3. Delete Task" << endl;
            cout << "4. Save Tasks to File" << endl;
            cout << "5. Load Tasks from File" << endl;
            cout << "6. Exit" << endl;
            cout << "Enter your choice: ";
            cin >> userChoice;
            switch (userChoice) {
                case 1:
                    addTask();
                    break;
                case 2:
                    viewTasks();
                    break;
                case 3:
                    deleteTask();
                    break;
                case 4: {
                    string filename;
                    cout << "Enter the filename to save tasks: ";
                    cin.ignore();
                    getline(cin, filename);
                    saveTasksToFile(filename);
                    break;
                }
                case 5: {
                    string filename;
                    cout << "Enter the filename to load tasks: ";
                    cin.ignore();
                    getline(cin, filename);
                    // Implement the function to load tasks from file
                    break;
                }
                case 6:
                    cout << "Exiting Task Manager. Goodbye!" << endl;
                    break;
                default:
                    cout << "Invalid choice. Please try again." << endl;
            }
            cout << endl;
        } while (userChoice != 6);
    }
}

int main() {
    int choice;

    do {
        cout << "========= User Management =========" << endl;
        cout << "1. Add User" << endl;
        cout << "2. Display Users" << endl;
        cout << "3. Choose User" << endl;
        cout << "4. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                addUser();
                break;
            case 2:
                displayUsers();
                break;
            case 3:
                chooseUser();
                break;
            case 4:
                cout << "Exiting User Management. Goodbye!" << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }

        cout << endl;
    } while (choice != 4);

    return 0;
}
